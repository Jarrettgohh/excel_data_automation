1. Have a main function file that stores all the methods related to .xlsx|.csv|.txt file 
2. Have a new .py file for each option methods; this files would be called from the main.py file

==> New feature idea:
-> Software to extract capacitance value at V=0 and use it to calculate the k value

1. Extract capacitance value at v=0, and place in a new excel file
2. Gather information about the thicknes and dimensions (to calculate the area)
3. Run macro to calculate k value with pre-defined formulas


==> To work on now:
1. Allow settings of col to read and write using the letters instead of number values ✓
2. Handle permission denied error; when the file to write is open ✓
3. When reading files, allow setting of keywords to read example "D1-initial". This allows matching of names such as "D1-initial-bd-100 hz" or "D1-initial-bd", etc
4. Allow automatic setting of header to write ✓
5. Allow setting of file path from root directory with the "~" prefix; root directory would refer to "\"
6. Log messages on the screen ✓
7. Allow setting of keyword in the config.json such as "bd" or "fail", and would inform user if the files with these text is detected

8. Extracting and transferring data from .txt file ✓
9. Handle if .xlsx file name to write doesn't have .xlsx file extension ✓

12. Update message logging, not really accurate as .xls -> .xlsx conversion is for all file at once instead of individually ✓

13. Powershell function to convert xls to xlsx -> ensure that the file extension of the file to convert is actually .xls, but not .txt or .csv instead ✓

14. Handle if the col and row to read is out of range ✓

15. Configuration for temperature IV compilation:
-> Set different file to read for each folder
-> OR to set matching pattern for file names in each folder -> To match `A1` in example`A1_25C_neg` ✓
-> OR matching words `A1` and `pos` -> to differentiate between positive and negative values ✓
-> Handle if the folder dir not found ✓

-> To not omit certain files that contains sub-string; Eg. "breakdown" ✓
-> Set order of files to read and write -- for the `matching_values` file config
-> Integrate automatic cell text wrap -- get from otter cases project

--> TO_READ.file_type == 'txt'|'csv'|'xls'
--> TO_READ.files.type == 'match' | 'hardcode'
--> TO_WRITE.relative_folder_directory gets error when writing headers if set other than "/"


[
"100Hz-1.2V",
"100Hz-2V",
"500Hz-2V"
"100Hz-1.5V",
]


--> Logic for ordered values
1. To first filter the main files_to_order list for all those values that matches atleast one item in the ordered value config; dont bother about the order first -> LIST CODENAME: `FILTERED`

2. iterate through each config values and create individual list of values files that matches each particualr config value -> number of individual list would be same as length of ordered value config list

3. Iterate through each item in the `FILTERED` list, in the REVERSED format

--> For the range of length of the `FILTERED` list --> Iteration would happen from the back (as the list is reversed) for the range of length of the `FILTERED` list
 1) Iterate through values in the indices before the current index -> eg. if current index is 4, the iterate through 0 -> 3

 2) In each iteration, iterate through each list as created in point 2; starting first with the first index -> 100Hz in this case.

 3) If the  current iterated value has higher hierachy than the value present in the index before -> eg. both matches 100Hz, but the current index matches 1.5v and the one in the index before only matches 1.2v, then bring the current index before the one that was before it last time 